@page "/cart/"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@attribute [Authorize]
@using System.Linq;

<h3 style="padding-top:1rem;" class=" card-title text-center p-5 mt-1">My Cart</h3>
<div class="border-top px-2 mx-2 pb-1" style="background-color:#1ABC9C;"></div>

<div class="row pt-4">
    <div class="col-md-8">
        <!-- Part 1 -->
        @if (tempCarts == null)
        {
            @if (custCart.Count == 0)
            {
                <div class="alert alert-info">Loading Cart...</div>
            }
        }
        else
        {
            @if (filteredSoftwareCarts.Count != 0)
            {
                <table class="table table-responsive">
                    <thead>
                        <tr>
                            <th>Game(s)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var custCartItem in custCart)
                        {
                            @if (@custCartItem.ProductHardwareId == null)
                            {
                                <tr>
									<td class="col-md-4">
                                        @if (@custCartItem.ProductSoftware.sthumbnail != null)
                                        {
                                            <img src="@("data:image/png;base64," + Convert.ToBase64String(@custCartItem.ProductSoftware.sthumbnail))" alt="image" />
                                        }
                                    </td>
									<td class="col-md-4">
                                        <h5 class="mt-1">Title: @custCartItem.ProductSoftware.sTitle</h5>
                                        <div>Price: $@custCartItem.ProductSoftware.sPrice</div>
									</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
            @if (filteredHardwareCarts.Count != 0)
            {
                <table class="table table-responsive">
                    <thead>
                        <tr>
                            <th>Accessorie(s)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var custCartItem in custCart)
                        {
                            @if (@custCartItem.ProductSoftwareId == null)
                            {
                                <tr>
									<td class="col-md-4">
										@if (@custCartItem.ProductHardware.hthumbnail != null)
										{
											<img src="@("data:image/png;base64," + Convert.ToBase64String(@custCartItem.ProductHardware.hthumbnail))" alt="image" />
										}
									</td>
									<td class="col-md-4">
                                    <h5 class="mt-1">Title: @custCartItem.ProductHardware.hTitle</h5>
                                    <div>$@custCartItem.ProductHardware.hPrice</div>
                                    
                                    
                                    <div class="form-group w-50">
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <button class="btn btn-primary" @onclick="() => DecrementQuantity(custCartItem.Id)">-</button>
                                            </span>
                                            <input style="width: 30%" disabled="true" type="number" class="form-control" @bind="@custCartItem.Quantity" min="0" />
                                            <span class="input-group-btn">
                                                <button class="btn btn-primary" @onclick="() => IncrementQuantity(custCartItem.Id)">+</button>
                                            </span>
                                        </div>
                                    </div>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
        }
    </div>

    <div class="col-md-4 " style="padding-top:4rem;padding-right:3rem">
        <!-- Part 2 -->
        <div class="rounded d-flex flex-column p-2" style="background-color: #f8f9fa;">
            <div class="p-2 me-3">
                <h4>Games and Accessories Summary</h4>
            </div>
            <div class="p-2 d-flex">
                <div class="col-8">Price</div>
                <div class="ms-auto">$@string.Format("{0:0.00}", TotalPrice)</div>
            </div>
            <div class="p-2 d-flex">
                <div class="col-8">Discount</div>
                <div class="ms-auto">- $0.00</div>
            </div>
            <div class="border-top px-2 mx-2"></div>

            <div class="p-2 d-flex pt-3">
                <div class="col-8"><b>Subtotal</b></div>
                <div class="ms-auto"><b class="text-success"> $@string.Format("{0:0.00}", TotalPrice)</b></div>
            </div>
			<div class="border-top px-2 mx-2 pt-2"></div>
			
			<div class="p-2 d-flex pt-3 form-group">
				<div class="col-4"><b>Payment By:</b></div>
				<div class="col-8">
					<InputSelect @bind-Value="payment.PaymentType" class="form-control">
						@foreach (var paymentType in paymentList)
						{
							<option value="@paymentType">@paymentType</option>
						}
					</InputSelect>
				</div>
			</div>

		


			<button class="btn btn-primary" @onclick="CheckOut">Check Out</button>
        </div>
    </div>
</div>
	
	
	

@code {
	private List<TempCart>? filteredSoftwareCarts;
	private List<TempCart>? filteredHardwareCarts;
	private List<TempCart>? tempCarts;
	private List<TempCart>? custCart = new List<TempCart>();
	private List<Customer>? customers;
	private List<CustOrder>? custOrders;
	List<string> paymentList = new List<string> { "Card", "PayNow", "GrabPay" };
	CustOrder? custOrder = new CustOrder();
	Payment? payment = new Payment();
	private int CustId;
	private double? TotalPrice = 0;

	private void IncrementQuantity(int custCartId)
	{
		foreach(var custCartItem in custCart)
		{
			if(custCartItem.Id == custCartId)
			{
				custCartItem.Quantity++;
				TotalPrice += custCartItem.ProductHardware.hPrice;
			}
		}

	}

	private void DecrementQuantity(int custCartId)
	{
		foreach (var custCartItem in custCart)
		{
			if (custCartItem.Id == custCartId)
			{
				if (custCartItem.Quantity > 0)
				{
					custCartItem.Quantity--;
					TotalPrice -= custCartItem.ProductHardware.hPrice;
				}
			}
		}
	}

	protected async override Task OnInitializedAsync()
	{
		customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
		tempCarts = await _client.GetFromJsonAsync<List<TempCart>>($"{Endpoints.TempCartsEndpoint}");

		var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
		var user = authstate.User;
		var name = user.Identity.Name;

		foreach (var customer in customers)
		{
			if (customer.Email == name)
			{
				CustId = customer.Id;
			}
		}

		if (tempCarts != null)
		{
			foreach (var tempcart in tempCarts)
			{
				if (tempcart.CustomerId == CustId)
				{
					custCart.Add(tempcart);
					if (tempcart.ProductSoftwareId == null)
					{
						TotalPrice += ((double)tempcart.Quantity * tempcart.ProductHardware.hPrice);
					}
					else
					{
						TotalPrice += ((double)tempcart.Quantity * tempcart.ProductSoftware.sPrice);
					}
				}
			}
		}

		filteredSoftwareCarts = custCart.Where(c => c.ProductHardwareId == null).ToList();
		filteredHardwareCarts = custCart.Where(c => c.ProductSoftwareId == null).ToList();
	}

	private async Task CheckOut()
	{
		custOrder.OrderDateTime = DateTime.Now;
		custOrder.CustomerId = CustId;
		await _client.PostAsJsonAsync(Endpoints.CustOrdersEndpoint, custOrder);
		custOrders = await _client.GetFromJsonAsync<List<CustOrder>>($"{Endpoints.CustOrdersEndpoint}");
		foreach(var custCartItem in custCart)
		{
			CustOrderItem? custOrderItem = new CustOrderItem();
			custOrderItem.CustOrderId = custOrders.Count;

			if(custCartItem.ProductSoftwareId == null)
			{
				custOrderItem.ProductHardwareId = custCartItem.ProductHardwareId;
				ProductHardware productHardware = new ProductHardware();
				productHardware = await _client.GetFromJsonAsync<ProductHardware>($"{Endpoints.ProductHardwaresEndpoint}/{custCartItem.ProductHardwareId}");
				productHardware.Inventory -= custCartItem.Quantity;
				await _client.PutAsJsonAsync($"{Endpoints.ProductHardwaresEndpoint}/{custCartItem.ProductHardwareId}", productHardware);

			}
			if (custCartItem.ProductHardwareId == null)
			{
				custOrderItem.ProductSoftwareId = custCartItem.ProductSoftwareId;
			}
			custOrderItem.Qty = custCartItem.Quantity;
			
			await _client.PostAsJsonAsync(Endpoints.CustOrderItemsEndpoint, custOrderItem);
			await _client.DeleteAsync($"{Endpoints.TempCartsEndpoint}/{custCartItem.Id}");
		}
		if (payment.PaymentType == null)
		{
			payment.PaymentType = paymentList[0];
		}
		payment.Amount = double.Parse(string.Format("{0:0.00}", TotalPrice));
		payment.PaymentDateTime = DateTime.Now;
		payment.CustomerId = CustId;
		payment.CustOrderId = custOrders.Count;
		await _client.PostAsJsonAsync(Endpoints.PaymentsEndpoint, payment);
		_navManager.NavigateTo("/store/");
	}

	
}

					
			

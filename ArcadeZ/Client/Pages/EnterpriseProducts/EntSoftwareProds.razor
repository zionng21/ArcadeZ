@page "/enterpriseProducts/software/"
@inject HttpClient _client
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]

<EnterpriseProducts />
@if (currProductSoftwares == null)
{
	<div class="alert alert-info">Loading Software Products...</div>
}
else
{
	<div class="row p-5">
		@foreach (var productsoftware in currProductSoftwares)
		{
			<div class="col-md-3 mb-3">
				<div class="card h-100">
					<a class="card-body" style="box-shadow: 0 0 15px rgba(26, 188, 156, 0.5);" href="/enterpriseProducts/software/@productsoftware.Id">
						<div style ="text-align:center">
							@if(productsoftware.sthumbnail != null)
							{
								existingImageData = Convert.ToBase64String(productsoftware.sthumbnail);
								<img src="@("data:image/png;base64," + existingImageData)" alt="image" />
							}
							else
							{
								<img width=79% src="images/Image_not_available.png" class="img-fluid" alt="" />
							}
						</div>
						<hr>
						<h5 class="card-title">@productsoftware.sTitle</h5>
						<p>$@productsoftware.sPrice</p>
					</a>
				</div>
			</div>
		}
	</div>
}
@code {
	private List<ProductSoftware>? productSoftwares;
	private List<ProductSoftware>? currProductSoftwares = new List<ProductSoftware>();
	private List<Enterprise>? enterprises;
	private int entId;
	private string existingImageData;

	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		productSoftwares = await _client.GetFromJsonAsync<List<ProductSoftware>>($"{Endpoints.ProductSoftwaresEndpoint}");
		enterprises = await _client.GetFromJsonAsync<List<Enterprise>>($"{Endpoints.EnterprisesEndpoint}");

		var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
		var user = authstate.User;
		var name = user.Identity.Name;

		foreach (var enterprise in enterprises)
		{
			if (enterprise.Email == name)
			{
				entId = enterprise.Id;
			}
		}

		if(productSoftwares != null)
		{
			foreach(var productSoftware in productSoftwares)
			{
				if(productSoftware.EnterpriseId == entId)
				{
					currProductSoftwares.Add(productSoftware);
				}
			}
		}
	}

	public void Dispose()
	{
		_interceptor.DisposeEvent();
	}
}

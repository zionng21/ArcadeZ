@page "/store/software/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
<h3 style="padding-top:1rem;" class=" card-title text-center p-5 mt-1">>@productSoftware.sTitle Description</h3>
<div class="border-top px-2 mx-2 pb-1" style="background-color:#1ABC9C;"></div>

<div class="container mt-4">

	<p>Image</p>
	<div class="card p-4">

		<h3 class="card-title">@productSoftware.sTitle</h3>
		<p class="card-text">@productSoftware.Description</p>
		<p class="card-text"><small class="text-muted">@productSoftware.Category</small></p>

		@if (Disabled == false)
		{
			<button class="btn btn-primary w-50" @onclick="AddToCart">Add to Cart</button>
		}
		else
		{
			<button class="btn btn-primary w-50" @onclick="GoToCart" disabled>In Cart</button>
		}
	</div>
</div>



@code {

	[Parameter] public int id { get; set; }
	TempCart? tempCart = new TempCart();
	ProductSoftware? productSoftware = new ProductSoftware();
	private List<TempCart>? tempCarts;
	private List<TempCart>? custCart = new List<TempCart>();
	private List<Customer>? customers;
	private int CustId;

    public bool Disabled { get; set; } = false;

	private async Task AddToCart()
	{

		tempCart.Quantity = 1;
		tempCart.ProductSoftwareId = productSoftware.Id;
		tempCart.CustomerId = CustId;
		await _client.PostAsJsonAsync(Endpoints.TempCartsEndpoint, tempCart);
		_navManager.NavigateTo("/cart/");
	}
	private void GoToCart()
	{
		_navManager.NavigateTo("/cart/");
	}

	protected async override Task OnParametersSetAsync()
	{

		productSoftware = await _client.GetFromJsonAsync<ProductSoftware>($"{Endpoints.ProductSoftwaresEndpoint}/{id}");
		tempCarts = await _client.GetFromJsonAsync<List<TempCart>>($"{Endpoints.TempCartsEndpoint}");
		customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");

		var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
		var user = authstate.User;
		var name = user.Identity.Name;

		foreach (var customer in customers)
		{
			if (customer.Email == name)
			{
				CustId = customer.Id;
			}
		}
		if (tempCarts.Count != 0)
		{
			foreach (var tempcart in tempCarts)
			{
				if (tempcart.CustomerId == CustId)
				{
					custCart.Add(tempcart);
				}

			}
		}
		if (custCart.Count != 0)
		{
			foreach (var custCartItem in custCart)
			{
				if (custCartItem.ProductSoftwareId != null)
				{
					if (custCartItem.ProductSoftwareId == productSoftware.Id)
					{
						Disabled = true;
					}
				}
			}
		}
	}
}

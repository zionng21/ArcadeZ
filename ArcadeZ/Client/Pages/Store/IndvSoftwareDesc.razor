@page "/store/software/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 style="padding-top:1rem;" class=" card-title text-center p-5 mt-1"><b style="color: #1ABC9C">Software</b> Description</h3>
<div class="border-top px-2 mx-2 pb-1" style="background-color:#1ABC9C;"></div>

<main class="mt-5 pt-4">
	<div style="width: 75%; box-shadow: 0 0 15px rgba(26, 188, 156, 0.5);" class="mx-auto border border-2 p-3 container mt-5 pb-5">
		<!--Grid row-->
		<div class="row">
			<!--Grid column-->
			<div class="col-md-6 mb-4">
				<img src="images/Fortnite.png" class="img-fluid" alt="" />
			</div>

			<div class="col-md-5 mb-5 text-center ">

				<div class="p-4 align-items-center">
					<div class="mb-3">
						<a href="">
							<span class="badge bg-info me-1">New</span>
						</a>
						<a href="">
							<span class="badge bg-danger me-1">Bestseller</span>
						</a>
					</div>
					<strong><p style="font-size: 50px;">@productSoftware.sTitle</p></strong>

					<p class="lead">
						<span class="me-1">
							<del>$1000</del>
						</span>
						<span>$@productSoftware.sPrice</span>
					</p>
					<strong><p style="font-size: 20px;">Description</p></strong>
					<p>@productSoftware.Description</p>
					
					@* <form class="justify-content-center text-center"> *@
						@if (Disabled == false)
						{
							<button class="w-75 btn btn-primary ms-1" @onclick="AddToCart">Add to Cart</button>
						}
						else
						{
							<button class="w-75 btn btn-primary  ms-1" @onclick="GoToCart">In Cart</button>
						}
					@* </form> *@
				</div>
				<!--Content-->`
			</div>
			<!--Grid column-->
		</div>
		<!--Grid row-->
	</div>
</main>



<div style="background-color:#1ABC9C; color:white;">
	<!--Grid row-->
	<div class="row d-flex justify-content-center" style="background-color:#1ABC9C;">
		<!--Grid column-->
		<div class="col-md-6 text-center">
			<h4 class="my-4 h4">Additional information</h4>

			<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Natus suscipit modi sapiente illo soluta odit voluptates, quibusdam officia. Neque quibusdam quas a quis porro? Molestias illo neque eum in laborum.</p>
			<br>
			<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Natus suscipit modi sapiente illo soluta odit voluptates, quibusdam officia. Neque quibusdam quas a quis porro? Molestias illo neque eum in laborum.</p>
		</div>
		<!--Grid column-->
	</div>
	<!--Grid row-->
	<!--Grid row-->
	@* <div class="row">
	<!--Grid column-->
	<div class="col-lg-4 col-md-12 mb-4">
	<img src="https://mdbootstrap.com/img/Photos/Horizontal/E-commerce/Products/11.jpg" class="img-fluid" alt="" />
	</div>
	<!--Grid column-->
	<!--Grid column-->
	<div class="col-lg-4 col-md-6 mb-4">
	<img src="https://mdbootstrap.com/img/Photos/Horizontal/E-commerce/Products/12.jpg" class="img-fluid" alt="" />
	</div>
	<!--Grid column-->
	<!--Grid column-->
	<div class="col-lg-4 col-md-6 mb-4 fas fa-headset">
	<img src="https://mdbootstrap.com/img/Photos/Horizontal/E-commerce/Products/13.jpg" class="img-fluid" alt="" />
	</div>
	<!--Grid column-->
	</div> *@
	<!--Grid row-->
</div>


@code {

	[Parameter] public int id { get; set; }
	TempCart? tempCart = new TempCart();
	ProductSoftware? productSoftware = new ProductSoftware();
	private List<TempCart>? tempCarts;
	private List<TempCart>? custCart = new List<TempCart>();
	private List<Customer>? customers;
	private int CustId;

    public bool Disabled { get; set; } = false;

	private async Task AddToCart()
	{

		tempCart.Quantity = 1;
		tempCart.ProductSoftwareId = productSoftware.Id;
		tempCart.CustomerId = CustId;
		await _client.PostAsJsonAsync(Endpoints.TempCartsEndpoint, tempCart);
		_navManager.NavigateTo("/cart/");
	}
	private void GoToCart()
	{
		_navManager.NavigateTo("/cart/");
	}

	protected async override Task OnParametersSetAsync()
	{
		_interceptor.MonitorEvent();
		productSoftware = await _client.GetFromJsonAsync<ProductSoftware>($"{Endpoints.ProductSoftwaresEndpoint}/{id}");
		tempCarts = await _client.GetFromJsonAsync<List<TempCart>>($"{Endpoints.TempCartsEndpoint}");
		customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");

		var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
		var user = authstate.User;
		var name = user.Identity.Name;

		foreach (var customer in customers)
		{
			if (customer.Email == name)
			{
				CustId = customer.Id;
			}
		}
		if (tempCarts.Count != 0)
		{
			foreach (var tempcart in tempCarts)
			{
				if (tempcart.CustomerId == CustId)
				{
					custCart.Add(tempcart);
				}

			}
		}
		if (custCart.Count != 0)
		{
			foreach (var custCartItem in custCart)
			{
				if (custCartItem.ProductSoftwareId != null)
				{
					if (custCartItem.ProductSoftwareId == productSoftware.Id)
					{
						Disabled = true;
					}
				}
			}
		}
	}

	public void Dispose()
	{
		_interceptor.DisposeEvent();
	}
}

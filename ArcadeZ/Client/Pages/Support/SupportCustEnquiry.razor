@page "/support/custEnquiry/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@attribute [Authorize]

<div class="form-group">
	<label>Type of Enquiry: </label>
	<div>
		<InputSelect @bind-Value="custEnquiry.EnquiryType" class="form-control">
			@foreach (var enquiryType in @enquiryTypes)
			{
				<option value="@enquiryType">@enquiryType</option>
			}
		</InputSelect>
	</div>
	<div class="form-group">
		<label>Description: </label>
		<div>
			<InputTextArea @bind-Value="custEnquiry.EnquiryDesc" class="form-control" />
		</div>
	</div>
	<button @onclick="CreateEnquiry" type="submit" class="btn btn-success btn-block">
        Submit Enquiry
    </button>
</div>

@code {

	[Parameter] public int id { get; set; }
	private List<Customer>? customers;
	private List<CustEnquiry>? custEnquiries;
	private CustOrderItem? custOrderItem;
	private CustEnquiry custEnquiry = new CustEnquiry();
	List<string> enquiryTypes = new List<string> { "Gameplay or technical issue", "Refund" };
	private int CustId;

	protected async override Task OnParametersSetAsync()
	{
		custOrderItem = await _client.GetFromJsonAsync<CustOrderItem>($"{Endpoints.CustOrderItemsEndpoint}/{id}");
	}

	private async Task CreateEnquiry()
	{
		customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
		custEnquiries = await _client.GetFromJsonAsync<List<CustEnquiry>>($"{Endpoints.CustEnquiriesEndpoint}");
		var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
		var user = authstate.User;
		var name = user.Identity.Name;

		foreach (var customer in customers)
		{
			if (customer.Email == name)
			{
				CustId = customer.Id;
			}
		}
		custEnquiry.CustomerId = CustId;
		if(custEnquiry.EnquiryType == null)
		{
			custEnquiry.EnquiryType = enquiryTypes[0];
		}
		await _client.PostAsJsonAsync(Endpoints.CustEnquiriesEndpoint, custEnquiry);
		_navManager.NavigateTo("/");
	}
}

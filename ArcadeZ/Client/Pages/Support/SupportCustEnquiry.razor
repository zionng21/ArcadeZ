@page "/support/custEnquiry/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]

<h3 style="padding-top:1rem;" class=" card-title text-center p-5 mt-1">Write Your Enquires To Us</h3>
<div class="border-top px-2 mx-2 pb-1" style="background-color:#1ABC9C;"></div>

<div class="container mt-5 pb-5">
    <div style="width: 26rem; box-shadow: 0 0 15px rgba(26, 188, 156, 0.5);" class="mx-auto border border-2 p-3">
        <div class="form-group pt-4 text-center">
            <label>Type of Enquiry: </label>
            <div>
                <InputSelect @bind-Value="custEnquiry.EnquiryType" class="form-control">
                    @foreach (var enquiryType in @enquiryTypes)
                    {
                        <option value="@enquiryType">@enquiryType</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label>Description: </label>
                <div>
                    <InputTextArea @bind-Value="custEnquiry.EnquiryDesc" class="form-control" />
                </div>
            </div>
            <!-- Checkbox -->
            <div class="form-check d-flex justify-content-center mb-4">
                <input class="form-check-input me-2"
                       type="checkbox"
                       value=""
                       id="form4Example4"
                       checked />
                <label class="form-check-label" for="form4Example4">
                    Send me a copy of this message
                </label>
            </div>
            <div class="d-grid gap-2">
                <button @onclick="CreateEnquiry" type="submit" class="btn btn-success">
                    Submit Enquiry
                </button>
            </div>
        </div>
    </div>
</div>



@code {
	/*Initialise*/
	private ProductHardware? productHardware;
	private ProductSoftware? productSoftware;

	[Parameter] public int id { get; set; }
	private List<Customer>? customers;
	private List<CustEnquiry>? custEnquiries;
	private CustOrderItem? custOrderItem;
	private CustEnquiry custEnquiry = new CustEnquiry();
	List<string> enquiryTypes = new List<string> { "Gameplay or technical issue", "Refund" };
	private int CustId;

	/*Once load, Below Code Will Run*/
	protected async override Task OnParametersSetAsync()
	{
		_interceptor.MonitorEvent();
		custOrderItem = await _client.GetFromJsonAsync<CustOrderItem>($"{Endpoints.CustOrderItemsEndpoint}/{id}");
	}

	private async Task CreateEnquiry()
	{
		customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
		custEnquiries = await _client.GetFromJsonAsync<List<CustEnquiry>>($"{Endpoints.CustEnquiriesEndpoint}");
		var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
		var user = authstate.User;
		var name = user.Identity.Name;

		foreach (var customer in customers)
		{
			if (customer.Email == name)
			{
				CustId = customer.Id;
			}
		}

		custEnquiry.CustomerId = CustId;
		if(custEnquiry.EnquiryType == null)
		{
			custEnquiry.EnquiryType = enquiryTypes[0];
		}
		@if (custOrderItem.ProductHardwareId == null)
		{
			productSoftware = await _client.GetFromJsonAsync<ProductSoftware>($"{Endpoints.ProductSoftwaresEndpoint}/{custOrderItem.ProductSoftwareId}");
			custEnquiry.EnquiryDesc += productSoftware.sTitle;
		}
		else
		{
			productHardware = await _client.GetFromJsonAsync<ProductHardware>($"{Endpoints.ProductHardwaresEndpoint}/{custOrderItem.ProductHardwareId}");
			custEnquiry.EnquiryDesc += productHardware.hTitle;
		}
		await _client.PostAsJsonAsync(Endpoints.CustEnquiriesEndpoint, custEnquiry);
		_navManager.NavigateTo("/");

	}

	public void Dispose()
	{
		_interceptor.DisposeEvent();
	}
}

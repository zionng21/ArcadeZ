<EditForm Model="@productSoftware" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        @if (productSoftware.sthumbnail == null && @Disabled != true)
        {
            <div class="form-group">
                <label>Image: </label>
                <div>
                    <InputFile OnChange="HandleFileSelected"></InputFile>
                </div>
            </div>
        }
        @if (Disabled != null && productSoftware.sthumbnail != null)
        {
            existingImageData = Convert.ToBase64String(productSoftware.sthumbnail);
            @if (@Disabled == true)
            {
                <div>
                    <label>Image: </label>
                    <img src="@("data:image/png;base64," + existingImageData)" alt="image" />
                </div>
            }
            else
            {
                <div class="form-group">
                    <label>Image: </label>
                    <img src="@("data:image/png;base64," + existingImageData)" alt="image" />
                    <div>
                        <InputFile OnChange="HandleFileSelected"></InputFile>
                    </div>
                </div>
            }
        }
        <div class="form-group">
            <label>Title: </label>
            <div>
                <InputText @bind-Value="@productSoftware.sTitle" class="form-control" />
                <ValidationMessage For="@(() => productSoftware.sTitle)" />
            </div>
        </div>

        <div class="form-group">
            <label>Price: </label>
            <div>
                <InputNumber @bind-Value="@productSoftware.sPrice" class="form-control" />
                <ValidationMessage For="@(() => productSoftware.sPrice)" />
            </div>
        </div>

        <div class="form-group">
            <label>Category: </label>
            <div>
                <InputText @bind-Value="@productSoftware.Category" class="form-control" />
                <ValidationMessage For="@(() => productSoftware.Category)" />
            </div>
        </div>

        <div class="form-group">
            <label>Description: </label>
            <div>
                <InputTextArea @bind-Value="@productSoftware.Description" class="form-control" />
                <ValidationMessage For="@(() => productSoftware.Description)" />
            </div>
        </div>

        <div class="form-group">
            <label>Enterprise ID: </label>
            <div>
                <InputNumber @bind-Value="@productSoftware.EnterpriseId" class="form-control" />
                <ValidationMessage For="@(() => productSoftware.EnterpriseId)" />
            </div>
        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }

    <BackToList Target="productsoftwares" />

</EditForm>


@code {

    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public ProductSoftware? productSoftware { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private byte[] imageBytes;
    private string existingImageData;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        
        if (file != null)
        {
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 376, 282);
            // Read the selected file
            using (var stream = resizedFile.OpenReadStream())
            {
                // Convert the file content to a byte array
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    imageBytes = memoryStream.ToArray();

                    // Assign the byte array to the productSoftware.thumbnail property
                    productSoftware.sthumbnail = imageBytes;
                }
            }
        }
    }


}

@page "/payments/"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]
<h3 style="padding-top:1rem;" class=" card-title text-center p-5 mt-1">Admin View Page</h3>
<div class="border-top px-2 mx-2 pb-1" style="background-color:#1ABC9C;"></div>

<OtherPages />

<h3 class="card-title">Payment Creation</h3>
<a href="/payments/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New Payment
</a>
<br />
<br />

<h3 class="card-title">Payment</h3>

@if (Payments == null)
{
	<div class="alert alert-info">Loading Payment...</div>
}
else
{
	<table class="table table-responsive" id="paymentTable">
		<thead>
			<tr>
				<th>Payment Date</th>
				<th>Amount</th>
				<th>Payment Type</th>
				<th>CustomerID</th>
				<th>CustomerOrderID</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var payment in Payments)
			{
				<tr>
					<td>@payment.PaymentDateTime</td>
					<td>@payment.Amount</td>
					<td>@payment.PaymentType</td>
					<td>@payment.CustomerId</td>
					<td>@payment.CustOrderId</td>
					<td>
						<a href="/payments/view/@payment.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>
						<a href="/payments/edit/@payment.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>
						<button class="btn btn-danger" @onclick="@(()=>Delete(payment.Id))">
							<span class="oi oi-delete"></span>
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<Payment>? Payments;

	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}");
	}

	async Task Delete(int PaymentId)
	{
		if (Payments != null)
		{
			var payment = Payments.First(q => q.Id == PaymentId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {payment.PaymentDateTime}?");
			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.PaymentsEndpoint}/{PaymentId}");
				await OnInitializedAsync();
			}
		}
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#paymentTable");
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#paymentTable");
		_interceptor.DisposeEvent();
	}

}
